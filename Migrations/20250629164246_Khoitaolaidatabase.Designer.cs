// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebPharmacy.Data;

#nullable disable

namespace WebPharmacy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250629164246_Khoitaolaidatabase")]
    partial class Khoitaolaidatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebPharmacy.Areas.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebPharmacy.Models.LienHe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("NgayGui")
                        .HasColumnType("datetime2");

                    b.Property<string>("TinNhan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LienHes");
                });

            modelBuilder.Entity("WebPharmacy.Models.LoaiThuoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TenLoai")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LoaiThuocs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TenLoai = "Giảm Đau - Hạ Sốt"
                        },
                        new
                        {
                            Id = 2,
                            TenLoai = "Kháng Sinh - Kháng Viêm"
                        },
                        new
                        {
                            Id = 3,
                            TenLoai = "Ho - Cảm Cúm"
                        },
                        new
                        {
                            Id = 4,
                            TenLoai = "Vitamin & Khoáng Chất"
                        },
                        new
                        {
                            Id = 5,
                            TenLoai = "Tiêu Hóa"
                        },
                        new
                        {
                            Id = 6,
                            TenLoai = "Tim Mạch - Huyết Áp"
                        },
                        new
                        {
                            Id = 7,
                            TenLoai = "Dụng Cụ Y Tế"
                        });
                });

            modelBuilder.Entity("WebPharmacy.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SoDienThoai")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebPharmacy.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<decimal>("Gia")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.Property<int>("ThuocId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ThuocId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("WebPharmacy.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int");

                    b.Property<int>("ThuocId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThuocId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("WebPharmacy.Models.Thuoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Gia")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("HinhAnhUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoaiThuocId")
                        .HasColumnType("int");

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenThuoc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LoaiThuocId");

                    b.ToTable("Thuocs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Gia = 30000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00049_1_l.webp",
                            LoaiThuocId = 1,
                            MoTa = "Giảm nhanh các cơn đau và hạ sốt, chứa Paracetamol và Caffeine.",
                            TenThuoc = "Panadol Extra"
                        },
                        new
                        {
                            Id = 2,
                            Gia = 25000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00414_1_l.webp",
                            LoaiThuocId = 1,
                            MoTa = "Viên nén hạ sốt, giảm đau dành cho người lớn.",
                            TenThuoc = "Hapacol 650"
                        },
                        new
                        {
                            Id = 3,
                            Gia = 45000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00045_1_l.webp",
                            LoaiThuocId = 1,
                            MoTa = "Viên sủi giúp hạ sốt, giảm đau nhanh chóng.",
                            TenThuoc = "Efferalgan 500mg"
                        },
                        new
                        {
                            Id = 4,
                            Gia = 180000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P11933_1_l.webp",
                            LoaiThuocId = 2,
                            MoTa = "Kháng sinh phổ rộng điều trị nhiễm khuẩn đường hô hấp, tiết niệu.",
                            TenThuoc = "Augmentin 625mg"
                        },
                        new
                        {
                            Id = 5,
                            Gia = 38000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00021_1_l.webp",
                            LoaiThuocId = 2,
                            MoTa = "Thuốc kháng viêm, giảm phù nề sau chấn thương hoặc phẫu thuật.",
                            TenThuoc = "Alpha Choay"
                        },
                        new
                        {
                            Id = 6,
                            Gia = 110000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P01243_1.jpg",
                            LoaiThuocId = 2,
                            MoTa = "Thuốc chống viêm, chống dị ứng và ức chế miễn dịch.",
                            TenThuoc = "Medrol 16mg"
                        },
                        new
                        {
                            Id = 7,
                            Gia = 22000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P15582_1_l.webp",
                            LoaiThuocId = 3,
                            MoTa = "Giảm ho, long đờm hiệu quả.",
                            TenThuoc = "Terpin Codein"
                        },
                        new
                        {
                            Id = 8,
                            Gia = 95000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00320_1_l.webp",
                            LoaiThuocId = 3,
                            MoTa = "Điều trị các triệu chứng cảm thông thường: sốt, nhức đầu, sổ mũi.",
                            TenThuoc = "Decolgen Forte"
                        },
                        new
                        {
                            Id = 9,
                            Gia = 35000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00234_1_l.webp",
                            LoaiThuocId = 3,
                            MoTa = "Viên ngậm kháng khuẩn, làm dịu cơn đau họng.",
                            TenThuoc = "Strepsils Cool"
                        },
                        new
                        {
                            Id = 10,
                            Gia = 135000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00575_1_l.webp",
                            LoaiThuocId = 4,
                            MoTa = "Viên sủi bổ sung vitamin và khoáng chất, tăng cường năng lượng.",
                            TenThuoc = "Berocca Performance"
                        },
                        new
                        {
                            Id = 11,
                            Gia = 120000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P13997_1_l.webp",
                            LoaiThuocId = 4,
                            MoTa = "Bổ sung đầy đủ vitamin và khoáng chất cần thiết cho cơ thể.",
                            TenThuoc = "Supradyn"
                        },
                        new
                        {
                            Id = 12,
                            Gia = 165000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P17822_1_l.webp",
                            LoaiThuocId = 4,
                            MoTa = "Kết hợp nhân sâm G115 và vitamin, giúp giảm mệt mỏi.",
                            TenThuoc = "Pharmaton Energy"
                        },
                        new
                        {
                            Id = 13,
                            Gia = 115000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00223_1_l.webp",
                            LoaiThuocId = 5,
                            MoTa = "Điều trị tiêu chảy cấp và mạn tính ở người lớn và trẻ em.",
                            TenThuoc = "Smecta"
                        },
                        new
                        {
                            Id = 14,
                            Gia = 125000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00360_1_l.webp",
                            LoaiThuocId = 5,
                            MoTa = "Men vi sinh dạng ống giúp cân bằng hệ vi sinh đường ruột.",
                            TenThuoc = "Enterogermina"
                        },
                        new
                        {
                            Id = 15,
                            Gia = 90000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00196_1_l.webp",
                            LoaiThuocId = 5,
                            MoTa = "Thuốc chữ P, dạng gel giúp trung hòa acid dạ dày.",
                            TenThuoc = "Phosphalugel"
                        },
                        new
                        {
                            Id = 16,
                            Gia = 70000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P14917_1_l.webp",
                            LoaiThuocId = 6,
                            MoTa = "Thuốc điều trị tăng huyết áp và đau thắt ngực.",
                            TenThuoc = "Amlor 5mg"
                        },
                        new
                        {
                            Id = 17,
                            Gia = 130000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00685_1.jpg",
                            LoaiThuocId = 6,
                            MoTa = "Điều trị tăng huyết áp, suy tim mạn tính ổn định.",
                            TenThuoc = "Concor 5mg"
                        },
                        new
                        {
                            Id = 18,
                            Gia = 20000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P00267_1_l.webp",
                            LoaiThuocId = 7,
                            MoTa = "Băng keo thông thoáng, độ dính cao, bảo vệ các vết thương nhỏ.",
                            TenThuoc = "Băng keo cá nhân Urgo"
                        },
                        new
                        {
                            Id = 19,
                            Gia = 150000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P01535_1_l.webp",
                            LoaiThuocId = 7,
                            MoTa = "Đo nhiệt độ nhanh chóng, chính xác và an toàn.",
                            TenThuoc = "Nhiệt kế điện tử Omron"
                        },
                        new
                        {
                            Id = 20,
                            Gia = 5000m,
                            HinhAnhUrl = "https://data-service.pharmacity.io/pmc-upload-media/production/pmc-ecm-core/products/P01579_1_l.webp",
                            LoaiThuocId = 7,
                            MoTa = "Dùng để rửa mắt, mũi, súc miệng hằng ngày.",
                            TenThuoc = "Nước muối sinh lý 0.9%"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebPharmacy.Areas.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebPharmacy.Areas.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPharmacy.Areas.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebPharmacy.Areas.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebPharmacy.Models.OrderDetail", b =>
                {
                    b.HasOne("WebPharmacy.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebPharmacy.Models.Thuoc", "Thuoc")
                        .WithMany()
                        .HasForeignKey("ThuocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Thuoc");
                });

            modelBuilder.Entity("WebPharmacy.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("WebPharmacy.Models.Thuoc", "Thuoc")
                        .WithMany()
                        .HasForeignKey("ThuocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thuoc");
                });

            modelBuilder.Entity("WebPharmacy.Models.Thuoc", b =>
                {
                    b.HasOne("WebPharmacy.Models.LoaiThuoc", "LoaiThuoc")
                        .WithMany("Thuocs")
                        .HasForeignKey("LoaiThuocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoaiThuoc");
                });

            modelBuilder.Entity("WebPharmacy.Models.LoaiThuoc", b =>
                {
                    b.Navigation("Thuocs");
                });

            modelBuilder.Entity("WebPharmacy.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
